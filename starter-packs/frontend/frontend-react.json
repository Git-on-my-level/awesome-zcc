{
  "name": "frontend-react",
  "version": "1.0.0",
  "description": "Comprehensive React frontend development starter pack with TypeScript, modern tooling, and best practices for building scalable web applications.",
  "author": "awesome-zcc-community",
  "tags": ["react", "frontend", "typescript", "web", "components", "hooks"],
  "category": "frontend",
  "mementoProtocolVersion": "1.0.0",
  "components": {
    "modes": [
      {
        "name": "full-stack-developer",
        "required": false,
        "description": "Comprehensive full-stack mode for when backend integration is needed"
      },
      {
        "name": "technical-writer",
        "required": false,
        "description": "For documenting component APIs and user guides"
      }
    ],
    "workflows": [
      {
        "name": "comprehensive-pr-review",
        "required": true,
        "description": "Thorough code review process focusing on React best practices"
      },
      {
        "name": "systematic-debugging",
        "required": true,
        "description": "Structured debugging approach for React applications"
      }
    ],
    "agents": [
      {
        "name": "react-specialist",
        "required": true,
        "description": "Specialized React development agent for advanced patterns and optimization"
      }
    ]
  },
  "configuration": {
    "defaultMode": "full-stack-developer",
    "customCommands": {
      "component": {
        "description": "Create a new React component with TypeScript and tests",
        "template": "/component [ComponentName] - Create React component [ComponentName] with TypeScript types and comprehensive tests using react-specialist agent"
      },
      "hook": {
        "description": "Create a custom React hook with proper typing",
        "template": "/hook [hookName] - Create custom hook with TypeScript, tests, and usage documentation using react-specialist agent"
      },
      "optimize": {
        "description": "Analyze and optimize React component performance",
        "template": "/optimize [ComponentName] - Analyze and optimize React component [ComponentName] for performance using react-specialist agent"
      },
      "test": {
        "description": "Generate comprehensive tests for React components",
        "template": "/test [ComponentName] - Create unit and integration tests for [ComponentName] using React Testing Library"
      },
      "review": {
        "description": "Perform React-focused code review",
        "template": "/review [target] - Execute comprehensive-pr-review workflow with React-specific focus"
      },
      "debug": {
        "description": "Debug React application issues systematically",
        "template": "/debug [issue] - Use systematic-debugging workflow for React-specific [issue]"
      }
    },
    "projectSettings": {
      "language": "typescript",
      "testFramework": "vitest",
      "bundler": "vite",
      "linter": "eslint",
      "formatter": "prettier",
      "stylingApproach": "tailwind-css",
      "stateManagement": "built-in",
      "routerLibrary": "react-router",
      "formLibrary": "react-hook-form",
      "testingLibrary": "react-testing-library"
    },
    "devTools": {
      "reactDevTools": true,
      "storybook": false,
      "chromatic": false,
      "bundleAnalyzer": true
    }
  },
  "hooks": [
    {
      "name": "git-context-loader",
      "enabled": true,
      "config": {
        "includeStatus": true,
        "includeDiff": false
      }
    },
    {
      "name": "project-overview",
      "enabled": true,
      "config": {
        "includePackageJson": true,
        "includeTsConfig": true
      }
    },
    {
      "name": "react-context-enhancer",
      "enabled": true,
      "config": {
        "analyzeComponents": true,
        "trackHookUsage": true,
        "performanceMonitoring": false
      }
    }
  ],
  "compatibleWith": [
    "javascript",
    "typescript",
    "react",
    "nextjs",
    "vite",
    "create-react-app"
  ],
  "prerequisites": [
    {
      "name": "Node.js",
      "version": ">=18.0.0",
      "description": "Required for running React development tools"
    },
    {
      "name": "npm or yarn or pnpm",
      "description": "Package manager for installing dependencies"
    },
    {
      "name": "Git",
      "description": "Version control for collaboration and code review workflows"
    }
  ],
  "recommendedExtensions": [
    {
      "name": "ES7+ React/Redux/React-Native snippets",
      "description": "Code snippets for React development",
      "vscodeId": "dsznajder.es7-react-js-snippets"
    },
    {
      "name": "React Developer Tools",
      "description": "Browser extension for debugging React components",
      "chromeId": "fmkadmapgofadopljbjfkapdkoienihi"
    },
    {
      "name": "TypeScript Importer",
      "description": "Auto import TypeScript modules",
      "vscodeId": "pmneo.tsimporter"
    }
  ],
  "postInstall": {
    "message": "ðŸš€ React Frontend Starter Pack installed successfully!\n\nYou're now set up with:\nâœ… Full-stack developer mode with React expertise\nâœ… React specialist agent for advanced patterns\nâœ… Comprehensive code review and debugging workflows\nâœ… TypeScript and modern tooling support\n\nðŸŽ¯ Quick Start Commands:\nâ€¢ `/mode full-stack-developer` - Switch to development mode\nâ€¢ `/component UserProfile` - Create a new React component\nâ€¢ `/hook useApi` - Create a custom hook\nâ€¢ `/test UserProfile` - Generate comprehensive tests\nâ€¢ `/review src/components` - Review React components\nâ€¢ `/optimize Dashboard` - Analyze component performance\n\nðŸ“š Available workflows:\nâ€¢ comprehensive-pr-review: React-focused code reviews\nâ€¢ systematic-debugging: Methodical React debugging\n\nðŸ¤– Available agents:\nâ€¢ react-specialist: Advanced React patterns and optimization\n\nðŸ”§ Recommended project setup:\nâ€¢ TypeScript for type safety\nâ€¢ Vite for fast development\nâ€¢ Vitest for testing\nâ€¢ Tailwind CSS for styling\nâ€¢ React Testing Library for component testing\n\nHappy React development! ðŸŽ‰",
    "commands": [
      "zcc config set defaultMode full-stack-developer",
      "zcc config set projectSettings.typescript true",
      "zcc config set projectSettings.testFramework vitest"
    ],
    "suggestedFiles": [
      {
        "path": "tsconfig.json",
        "description": "TypeScript configuration for React project"
      },
      {
        "path": "vite.config.ts",
        "description": "Vite build configuration"
      },
      {
        "path": "package.json",
        "description": "Update with React and TypeScript dependencies"
      },
      {
        "path": ".eslintrc.js",
        "description": "ESLint configuration for React and TypeScript"
      },
      {
        "path": "tailwind.config.js",
        "description": "Tailwind CSS configuration"
      }
    ]
  },
  "examples": {
    "component": {
      "name": "Button Component Example",
      "description": "Create a reusable button component with variants",
      "command": "/component Button",
      "expectedOutput": "TypeScript React component with props interface, variants, and tests"
    },
    "hook": {
      "name": "Data Fetching Hook Example", 
      "description": "Create a custom hook for API data fetching",
      "command": "/hook useApi",
      "expectedOutput": "Custom hook with TypeScript types, error handling, and tests"
    },
    "optimization": {
      "name": "Performance Review Example",
      "description": "Optimize a component with performance issues",
      "command": "/optimize UserDashboard",
      "expectedOutput": "Performance analysis with React.memo, useMemo, and useCallback recommendations"
    }
  },
  "troubleshooting": {
    "commonIssues": [
      {
        "issue": "TypeScript errors with React components",
        "solution": "Ensure proper prop types and React.FC usage. Check tsconfig.json includes React types."
      },
      {
        "issue": "Performance issues with re-renders",
        "solution": "Use React DevTools Profiler and apply memoization strategies. Run /optimize command."
      },
      {
        "issue": "Testing components with hooks",
        "solution": "Use React Testing Library's renderHook and proper async testing patterns."
      },
      {
        "issue": "State management complexity",
        "solution": "Consider useReducer for complex state or external libraries like Zustand."
      }
    ],
    "diagnosticCommands": [
      "/debug performance - Analyze rendering performance issues",
      "/review component - Check component best practices",
      "/test component - Verify component testing coverage"
    ]
  },
  "learningResources": [
    {
      "title": "React Official Documentation",
      "url": "https://react.dev",
      "description": "Official React docs with modern patterns and hooks"
    },
    {
      "title": "TypeScript with React",
      "url": "https://www.typescriptlang.org/docs/handbook/react.html",
      "description": "TypeScript handbook section on React"
    },
    {
      "title": "React Testing Library",
      "url": "https://testing-library.com/docs/react-testing-library/intro/",
      "description": "Best practices for testing React components"
    },
    {
      "title": "React Performance",
      "url": "https://react.dev/learn/render-and-commit",
      "description": "Understanding React rendering and optimization"
    }
  ],
  "dependencies": {
    "peerDependencies": ["react", "react-dom"],
    "devDependencies": ["@types/react", "@types/react-dom", "typescript", "vite", "vitest"],
    "optionalDependencies": ["@testing-library/react", "tailwindcss", "react-router-dom"]
  }
}